{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","visibility","role","onClick","document","body","style","backgroundColor","toggleMode","htmlFor","TextForm","str","handleOnChange","event","setText","target","value","useState","text","resulttext","setResulttext","number","setnumber","heading","onChange","rows","newtext","toUpperCase","toLowerCase","i","split","length","lower","capResult","charAt","slice","join","showAlert","placeholder","name","repeat","getElementById","select","navigator","clipboard","writeText","replace","parseInt","Alert","alert","word","capitalize","msg","prototype","PropTypes","string","isRequired","about","defaultProps","App","setMode","setAlert","setVisibility","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7f5d3281.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    \r\n    const handledarkred= ()=>{\r\n        document.body.style.backgroundColor = 'darkred';\r\n    }\r\n    const handledarkgoldenrod= ()=>{\r\n        document.body.style.backgroundColor = 'darkgoldenrod';\r\n    }\r\n    const handledarkslategray= ()=>{\r\n        document.body.style.backgroundColor = 'darkslategray';\r\n    }\r\n    const handledarkgray= ()=>{\r\n        document.body.style.backgroundColor = 'darkgray';\r\n    }\r\n    const handledarkcyan= ()=>{\r\n        document.body.style.backgroundColor = 'darkcyan';\r\n    }\r\n\r\n    return (\r\n<>\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">about</Link>\r\n            </li> */}\r\n        </ul>\r\n        <div className={`btn-group ${props.visibility} `} role=\"group\" aria-label=\"Basic mixed styles example\">\r\n        <button type=\"button\" className=\"btn btn-danger\" onClick={handledarkred}></button>\r\n        <button type=\"button\" className=\"btn btn-warning\" onClick={handledarkgoldenrod}></button>\r\n        <button type=\"button\" className=\"btn btn-success\" onClick={handledarkslategray}></button>\r\n        <button type=\"button\" className=\"btn btn-secondary\" onClick={handledarkgray}></button>\r\n        <button type=\"button\" className=\"btn btn-info\" onClick={handledarkcyan}></button>\r\n        </div>\r\n            \r\n        \r\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n        </div>\r\n        </div>\r\n    </div>\r\n    </nav>\r\n</>\r\n    )\r\n}\r\n\r\nNavbar.prototype = {title: PropTypes.string.isRequired, about:PropTypes.string}\r\n\r\nNavbar.defaultProps = {title: 'Title text here', about: 'About text here'}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log('UpperCase was clicked')\r\n        let newtext = text.toUpperCase();\r\n        setResulttext(newtext);\r\n    }\r\n    const handleLoClick = ()=>{\r\n        let newtext = text.toLowerCase();\r\n        setResulttext(newtext);\r\n    }\r\n    const handleCapClick = ()=>{\r\n        for (let i = 0; i < text.split(\" \").length; i++) {   \r\n            let lower = text.split(\" \")[i].toLowerCase();\r\n            var capResult= capResult +\" \"+lower.charAt(0).toUpperCase() + lower.slice(1);\r\n        }\r\n        setResulttext(capResult.slice(10) )\r\n        \r\n    }\r\n    const handleResetClick =()=>{\r\n        let newtext = text;\r\n        setResulttext(newtext);\r\n        props.showAlert(\"Text is Reset\",\"success\");\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        // console.log('On Change')\r\n        setText(event.target.value);\r\n    }\r\n    const handleOnChangeNum = (event)=>{\r\n        // console.log('On Change')\r\n        setnumber(event.target.value);\r\n    }\r\n    const handleRepeatClick =()=>{\r\n        let newtext = text.repeat(number);\r\n        setResulttext(newtext);\r\n    }\r\n    const handleCopyClick =()=>{\r\n        let newtext = document.getElementById(\"myBox2\");\r\n        newtext.select();\r\n        navigator.clipboard.writeText(newtext.value)\r\n        props.showAlert(\"Text is Copied\",\"success\");\r\n    }\r\n    const handleExtraSpaces =()=>{\r\n        let newtext = text.split(/[ ]+/);\r\n        setResulttext(newtext.join(\" \"));\r\n    }\r\n    const countWords=(str) =>{\r\n        str = str.replace(/(^\\s*)|(\\s*$)/gi,\"\");\r\n        return str.split(' ').length;\r\n    }\r\n    \r\n    const [text, setText] = useState('')\r\n    // text=\"new text\" // Wrong way to set text\r\n    // setText(\"new text\") // Correct way to set text\r\n    const [resulttext, setResulttext] = useState('')\r\n    const [number, setnumber] = useState('')\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\">\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" id=\"myBox\" value={text} onChange={handleOnChange} rows=\"7\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary m-1\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n            <button className=\"btn btn-primary m-1\" onClick={handleLoClick}>Convert to LowerCase</button>\r\n            <button className=\"btn btn-primary m-1\" onClick={handleCapClick}>All Words Capitalized</button>\r\n            <button className=\"btn btn-primary m-1\" onClick={handleExtraSpaces}>Remove ExtraSpaces</button>\r\n            {/* <div className=\"form-check form-check-inline\">\r\n            <input className=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio1\" value=\"option1\"/>\r\n            <label className=\"form-check-label\" Htmlfor=\"inlineRadio1\">Convert to UpperCase</label>\r\n            </div>\r\n            <div className=\"form-check form-check-inline\">\r\n            <input className=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"option2\"/>\r\n            <label className=\"form-check-label\" Htmlfor=\"inlineRadio2\">Convert to LowerCase</label>\r\n            </div>\r\n            <div className=\"form-check form-check-inline\">\r\n            <input className=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"option2\"/>\r\n            <label className=\"form-check-label\" Htmlfor=\"inlineRadio2\">All Words Capitalized</label>\r\n            </div>\r\n            <div className=\"form-check form-check-inline\">\r\n            <input className=\"form-check-input\" type=\"radio\" name=\"inlineRadioOptions\" id=\"inlineRadio2\" value=\"option2\"/>\r\n            <label className=\"form-check-label\" Htmlfor=\"inlineRadio2\">Remove ExtraSpaces </label>\r\n            </div> */}\r\n            <button className=\"btn btn-danger m-1\" onClick={handleResetClick}>Reset</button>\r\n        </div>\r\n        <div className=\"container my-3\">\r\n            <h3>Text Repeater</h3>\r\n            <input placeholder=\"Enter the number\" name=\"repeatervalue\" type=\"number\" value={number} onChange={handleOnChangeNum}  />\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleRepeatClick}>Sumbit</button>\r\n        </div>\r\n        <div className=\"container my-3\">\r\n            <div className=\"mb-3\">\r\n            <textarea placeholder=\"Enter Text Above\" className=\"form-control\" id=\"myBox2\" value={resulttext} onChange={handleOnChange} rows=\"7\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopyClick}>Copy</button>\r\n            <div className=\"container my-3\">\r\n            <h3>Your Text Summary</h3>\r\n            <p>{resulttext.length>0?countWords(resulttext):\"0\"} words , {resulttext.length} characters</p>\r\n            <p>{parseInt(0.004 * resulttext.split(\" \").length)} minutes {resulttext.length>0?0.24 * resulttext.split(\" \").length:\"0\"} seconds read</p>\r\n            </div>        \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize= (word)=>{\r\n       const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n            \r\n        props.alert && \r\n        <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} id=\"alert\" role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}!</strong> {props.alert.msg}\r\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>\r\n    )\r\n}\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, {useState} from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const [visibility, setVisibility] = useState('invisible')\n  const showAlert= (message, type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },3000);\n  }\n  \n  const toggleMode= ()=>{\n    if (mode === 'light') {\n      setMode(\"dark\")\n      document.body.style.backgroundColor = '#191818';  \n      //  let color = document.getElementsByClassName('btn-group');\n      //       for (let i=0;i<elems.length;i+=1){\n      //         color[i].style.visibility = 'visible';\n      //       }\n          setVisibility('visible');\n      showAlert(\"Dark Mode is Enabled\",\"success\");\n      \n    }\n    else{\n      setMode(\"light\")\n      document.body.style.backgroundColor = 'white'; \n        // let color = document.getElementsByClassName('btn-group');\n        //     for (let i=0;i<elems.length;i+=1){\n        //       color[i].style.visibility = 'hidden';\n        //     }\n        setVisibility('invisible');\n      showAlert(\"Light Mode is Enabled\",\"success\");\n    }\n  }\n  \n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title='TextUtiles' mode={mode} toggleMode={toggleMode} visibility={visibility}  />\n    <Alert alert={alert}/>\n    <div className={`container my-3 text-${mode==='light'?'dark':'light'}`}>\n    {/* <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading = 'Enter the text to analyze below' />\n          {/* </Route>\n        </Switch> */}\n    </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}